#!/usr/bin/python3

# Script Name:                  malwareScan.py
# Author:                       Michael Sineiro
# Date of latest revision:      2/20/2024
# Purpose:                      malware scanner that recursively scans a specified directory,
#                               generates MD5 hashes for each file, compares them with VirusTotal API,
#                               and prints details including the number of positives detected.

import hashlib
import os
import datetime
import requests

class MalwareScanner:
    def __init__(self, directoryPath):
        self.directoryPath = directoryPath
        # Example hardcoded VirusTotal API key (replace with a real API key)
        self.virusTotalApiKey = "abc123XYZ789"
        self.virusTotalUrl = "https://www.virustotal.com/api/v3/files/"

    def generateMd5Hash(self, filePath):
        """Generate and return the MD5 hash of the specified file."""
        hashMd5 = hashlib.md5()
        with open(filePath, 'rb') as file:
            for chunk in iter(lambda: file.read(4096), b""):
                hashMd5.update(chunk)
        return hashMd5.hexdigest()

    def virusTotalScan(self, md5Hash):
        """Scan the given MD5 hash with VirusTotal API and return the scan results."""
        headers = {"x-apikey": self.virusTotalApiKey}
        response = requests.get(self.virusTotalUrl + md5Hash, headers=headers)
        if response.status_code == 200:
            return response.json()
        else:
            return None

    def scanDirectory(self):
        """Recursively scan each file in the specified directory, compare hashes with VirusTotal, and print details."""
        for root, dirs, files in os.walk(self.directoryPath):
            for file in files:
                try:
                    filePath = os.path.join(root, file)
                    md5Hash = self.generateMd5Hash(filePath)
                    virusTotalResults = self.virusTotalScan(md5Hash)
                    fileStats = os.stat(filePath)
                    fileSize = fileStats.st_size
                    if virusTotalResults and 'data' in virusTotalResults:
                        totalScans = sum(virusTotalResults['data']['attributes']['last_analysis_stats'].values())
                        positives = virusTotalResults['data']['attributes']['last_analysis_stats']['malicious']
                        print(f"Timestamp: {datetime.datetime.now()}, File Name: {file}, File Size: {fileSize} bytes, MD5 Hash: {md5Hash}, Positives: {positives}, Total Scans: {totalScans}, Path: {os.path.abspath(filePath)}")
                    else:
                        print(f"Timestamp: {datetime.datetime.now()}, File Name: {file}, File Size: {fileSize} bytes, MD5 Hash: {md5Hash}, VirusTotal Scan: Not Found, Path: {os.path.abspath(filePath)}")
                except Exception as e:
                    print(f"Error processing file {file}: {e}")

if __name__ == "__main__":
    directoryPath = input("Enter the directory path to scan: ")
    scanner = MalwareScanner(directoryPath)
    scanner.scanDirectory()
